// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Cookie cookie
// swagger:model cookie
type Cookie struct {

	// domain
	Domain []string `json:"domain"`

	// dynamic
	Dynamic bool `json:"dynamic,omitempty"`

	// httponly
	Httponly bool `json:"httponly,omitempty"`

	// indirect
	Indirect bool `json:"indirect,omitempty"`

	// maxidle
	// Pattern: ^[^\d+$]
	Maxidle int64 `json:"maxidle,omitempty"`

	// maxlife
	// Pattern: ^[^\d+$]
	Maxlife int64 `json:"maxlife,omitempty"`

	// name
	// Required: true
	// Pattern: ^[^\s]+$
	Name *string `json:"name"`

	// nocache
	Nocache bool `json:"nocache,omitempty"`

	// postonly
	Postonly bool `json:"postonly,omitempty"`

	// preserve
	Preserve bool `json:"preserve,omitempty"`

	// secure
	Secure bool `json:"secure,omitempty"`

	// type
	// Enum: [rewrite insert prefix]
	Type string `json:"type,omitempty"`
}

// Validate validates this cookie
func (m *Cookie) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxidle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxlife(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Cookie) validateDomain(formats strfmt.Registry) error {

	if swag.IsZero(m.Domain) { // not required
		return nil
	}

	for i := 0; i < len(m.Domain); i++ {

		if err := validate.Pattern("domain"+"."+strconv.Itoa(i), "body", string(m.Domain[i]), `^[^\s]+$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *Cookie) validateMaxidle(formats strfmt.Registry) error {

	if swag.IsZero(m.Maxidle) { // not required
		return nil
	}

	if err := validate.Pattern("maxidle", "body", string(m.Maxidle), `^[^\d+$]`); err != nil {
		return err
	}

	return nil
}

func (m *Cookie) validateMaxlife(formats strfmt.Registry) error {

	if swag.IsZero(m.Maxlife) { // not required
		return nil
	}

	if err := validate.Pattern("maxlife", "body", string(m.Maxlife), `^[^\d+$]`); err != nil {
		return err
	}

	return nil
}

func (m *Cookie) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

var cookieTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["rewrite","insert","prefix"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cookieTypeTypePropEnum = append(cookieTypeTypePropEnum, v)
	}
}

const (

	// CookieTypeRewrite captures enum value "rewrite"
	CookieTypeRewrite string = "rewrite"

	// CookieTypeInsert captures enum value "insert"
	CookieTypeInsert string = "insert"

	// CookieTypePrefix captures enum value "prefix"
	CookieTypePrefix string = "prefix"
)

// prop value enum
func (m *Cookie) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cookieTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Cookie) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Cookie) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Cookie) UnmarshalBinary(b []byte) error {
	var res Cookie
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
